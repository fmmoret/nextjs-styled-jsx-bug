import type { NextPage } from "next";
import Head from "next/head";

type ScreenSize = keyof typeof MediaQueries["MIN_WIDTHS"];
class MediaQueries {
  static readonly MIN_WIDTHS = {
    xs: 0,
    sm: 576,
    md: 768,
    lg: 992,
    xl: 1200,
  };
  static readonly MAX_WIDTHS = {
    xs: MediaQueries.MIN_WIDTHS.sm - 1,
    sm: MediaQueries.MIN_WIDTHS.md - 1,
    md: MediaQueries.MIN_WIDTHS.lg - 1,
    lg: MediaQueries.MIN_WIDTHS.xl - 1,
    xl: Infinity,
  };

  // ignores order of args
  static between(screenSize: ScreenSize, screenSize2: ScreenSize) {
    const MAX_WIDTH = Math.max(
      MediaQueries.MAX_WIDTHS[screenSize],
      MediaQueries.MAX_WIDTHS[screenSize2]
    );
    const MIN_WIDTH = Math.min(
      MediaQueries.MIN_WIDTHS[screenSize],
      MediaQueries.MIN_WIDTHS[screenSize2]
    );

    const hasMin = Number.isFinite(MIN_WIDTH);
    const hasMax = Number.isFinite(MAX_WIDTH);
    if (hasMin && hasMax) {
      return `only screen and (min-width: ${MIN_WIDTH}px) and (max-width: ${MAX_WIDTH}px)`;
    }
    if (hasMax) {
      return `only screen and (max-width: ${MAX_WIDTH}px)`;
    }
    if (hasMin) {
      return `only screen and (min-width: ${MIN_WIDTH}px)`;
    }
    return `only screen and (min-width: 0px)`;
  }

  static down(screenSize: ScreenSize) {
    const MAX_WIDTH = MediaQueries.MAX_WIDTHS[screenSize];
    const hasMax = Number.isFinite(MAX_WIDTH);
    if (hasMax) {
      return `only screen and (max-width: ${MAX_WIDTH}px)`;
    }
    return `only screen and (min-width: 0px)`;
  }

  static only(screenSize: ScreenSize) {
    const MAX_WIDTH = MediaQueries.MAX_WIDTHS[screenSize];
    const MIN_WIDTH: number = MediaQueries.MIN_WIDTHS[screenSize];

    const hasMin = Number.isFinite(MIN_WIDTH);
    const hasMax = Number.isFinite(MAX_WIDTH);
    if (hasMin && hasMax) {
      return `only screen and (min-width: ${MIN_WIDTH}px) and (max-width: ${MAX_WIDTH}px)`;
    }
    if (hasMax) {
      return `only screen and (max-width: ${MAX_WIDTH}px)`;
    }
    if (hasMin) {
      return `only screen and (min-width: ${MIN_WIDTH}px)`;
    }
    return `only screen and (min-width: 0px)`;
  }

  static up(screenSize: ScreenSize) {
    const MIN_WIDTH: number = MediaQueries.MIN_WIDTHS[screenSize];
    const hasMin = Number.isFinite(MIN_WIDTH);

    if (hasMin) {
      return `only screen and (min-width: ${MIN_WIDTH}px)`;
    }
    return `only screen and (min-width: 0px)`;
  }
}

const Home: NextPage = () => {
  return (
    <>
      <div className="container">
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className="main">
          <h1 className="title">
            Welcome to <a href="https://nextjs.org">Next.js!</a>
          </h1>
        </main>
      </div>

      <style jsx>
        {`
          .container {
            padding: 0 2rem;
          }

          .main {
            min-height: 100vh;
            padding: 4rem 0;
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
          }

          .title {
            margin: 0;
            line-height: 1.15;
            font-size: 4rem;
            text-align: center;
          }

          @media ${MediaQueries.up("xs")} {
            .container {
              background-color: red;
            }
          }

          @media ${MediaQueries.up("sm")} {
            .container {
              background-color: blue;
            }
          }

          @media ${MediaQueries.up("lg")} {
            .container {
              background-color: green;
            }
          }

          @media ${MediaQueries.up("xl")} {
            .container {
              background-color: yellow;
            }
          }

          @media ${MediaQueries.between("md", "lg")} {
            .title {
              color: red;
            }
          }
        `}
      </style>
    </>
  );
};

export default Home;
